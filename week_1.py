# -*- coding: utf-8 -*-
"""Copy of Week 1 - Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KusnouBwiiHBGMHtjIPr0pSiZaGD58R2

Q1. Suppose you have a jar with 4 jelly beans: 2 are strawberry-flavored, 1 is blueberry-flavored, and 1 is cinnamon-flavored. You draw one jelly bean at random from the jar.

    a. What is the sample space for this experiment?

    b. We define event A as the jelly bean drawn is strawberry-flavored and event B as The jelly bean drawn is not cinnamon-flavored. What are the probabilities of events A and B?

    c. Are events A and B mutually exclusive? Why or why not?

(b) P(A)=2/4 and P(B)=1-1/4
"""

a ={"Blue","straw1","straw2","cinnam"}

b= {"P(A)":1/2 ,"P(B)":3/4}

c= {"A and B are not mutually exclusive as P(A ∩ B )!=0 , (A ∩ B)={straw1,straw2}"}

""" Q2. Previously, we defined a **Python function P** to compute the probability of an event using the naive definition of probability. Generalize that function to compute the probability of events when they are
 not all equally likely. Use this new function to compute the probability of events A and B from the previous exercise.

 Hint: you can pass a third argument with the probability of each event.
"""

def P(S, A, weight):
    if set(A).issubset(set(S)):
        return sum(weight[it] for it in A)
    else:
        return 0

S = ['blue','straw1','straw2','cinnam']
A = ['straw1', 'straw2']
B = ['straw1', 'straw2', 'blue']
weight = {
    'blue': 1/4,
    'straw1': 1/4,
    'straw2': 1/4,
    'cinnam': 1/4
}
print(P(S, A, weight))
print(P(S, B, weight))

!pip install pymc==5.8.0 arviz==0.16.1 bambi==0.13.0 pymc-bart==0.5.2 kulprit==0.0.1 preliz==0.3.6 nutpie==0.9.1

"""Q3.  Use PreliZ to explore different parameters for the Gaussian distributions. Use the methods `plot_pdf`, `plot_cdf`, and `plot_interactive`. We discussed the probability mass/density functions and the cumulative density function. But there are other ways to represent functions like the percentile point function ppf. Using the `plot_ppf` method of PreliZ, plot the percentile point function for the BetaBinomial and Gaussian distributions. Can you explain how the ppf is related to the cdf and pmf/pdf?"""

# Import necessary libraries
import arviz as az  # For Bayesian data analysis and visualization
import matplotlib.pyplot as plt  # For plotting
import numpy as np  # For numerical operations
from scipy.special import binom, beta  # For binomial and beta distributions
import preliz as pz # defining priors
from cycler import cycler
import math

_, ax = plt.subplots(1, 2, figsize=(12, 5), sharex="col")
pz.BetaBinomial(alpha=10, beta=10, n=5).plot_ppf(ax=ax[0], legend="title")
pz.Normal(0, 1).plot_ppf(ax=ax[1], legend="title")

"""The PPF is the inverse of the CDF. While the CDF gives the probability that a random variable is less than or equal to a specified point, the PPF gives the point for which a certain probability is less than or equal to. Also we can say PDF/PMF are also related to PPF because ppf(x) is inverse of area of (pdf(X<x)).

Q4. Use PreliZ to compute the moments for the SkewNormal distribution for a different combination of parameters. Generate random samples of different sizes,
like 10, 100, and 1,000, and see if you can recover the values of the first two moments (mean and variance) from the samples. Report your obervations.
"""

_, axes = plt.subplots(4, 1, figsize=(10, 20), sharey=True, sharex=True)
axes=np.ravel(axes)

para=((0,1,3),(-1,3,2),(-4,5,6),(2,1,5)) #considering different values of parameters

for ax,(a,b,c) in zip(axes,para):

  print("For parameter : ",(a,b,c))

  Skew_Normal_dist=pz.SkewNormal(a,b,c)
  Skew_Normal_dist.plot_pdf(ax=ax,moments=["m", "d", "s", "k"])

  sizes=(10,100,1000)

  for size in sizes:
    sample=Skew_Normal_dist.rvs(size) # getting sample of given size
    mean=np.mean(sample) # calculating mean of sample
    std=np.std(sample) # calculating standard deviation of sample
    print("size : ",size,", mean : ",mean,", standard deviation : ",std)

  print('\n')

"""We were able to get quite close to the original values of mean and standard deviation as we increased size of samples for all the values of parameters.

By increasing the size of sampples for all values of parameters we were able to get close to the original meand and std. dev values

"""